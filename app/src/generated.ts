// Generated by @wagmi/cli@1.0.0 on 9/12/2023 at 9:11:30 AM
import {
  useNetwork,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  Address,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CoinFlip
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export const coinFlipABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'switchboardAddress', internalType: 'address', type: 'address' },
      { name: 'entryFee', internalType: 'uint256', type: 'uint256' },
      { name: 'functionId', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'address', type: 'address' },
      { name: 'received', internalType: 'address', type: 'address' },
    ],
    name: 'InvalidFunction',
  },
  {
    type: 'error',
    inputs: [{ name: 'requestId', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidRequest',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'address', type: 'address' },
      { name: 'received', internalType: 'address', type: 'address' },
    ],
    name: 'InvalidSender',
  },
  { type: 'error', inputs: [], name: 'MissingFunctionId' },
  { type: 'error', inputs: [], name: 'NotEnoughEthSent' },
  {
    type: 'error',
    inputs: [{ name: 'result', internalType: 'uint256', type: 'uint256' }],
    name: 'RandomnessResultOutOfBounds',
  },
  {
    type: 'error',
    inputs: [{ name: 'requestId', internalType: 'uint256', type: 'uint256' }],
    name: 'RequestAlreadyCompleted',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'address', type: 'address' },
      { name: 'received', internalType: 'address', type: 'address' },
    ],
    name: 'SwitchboardCallbackHandler__InvalidFunction',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'address', type: 'address' },
      { name: 'received', internalType: 'address', type: 'address' },
    ],
    name: 'SwitchboardCallbackHandler__InvalidSender',
  },
  {
    type: 'error',
    inputs: [],
    name: 'SwitchboardCallbackHandler__MissingFunctionId',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'callId',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'user',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'CoinFlipRequested',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'callId',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'user',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'isWinner', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'CoinFlipSettled',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'guess',
        internalType: 'enum CoinFlip.CoinFlipSelection',
        type: 'uint8',
      },
    ],
    name: 'coinFlipRequest',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestId', internalType: 'uint256', type: 'uint256' },
      { name: 'result', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'coinFlipSettle',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllRequests',
    outputs: [
      {
        name: '',
        internalType: 'struct CoinFlip.CoinFlipRequest[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'callId', internalType: 'address', type: 'address' },
          {
            name: 'guess',
            internalType: 'enum CoinFlip.CoinFlipSelection',
            type: 'uint8',
          },
          { name: 'isWinner', internalType: 'bool', type: 'bool' },
          { name: 'isSettled', internalType: 'bool', type: 'bool' },
          {
            name: 'requestTimestamp',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'settledTimestamp',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCoinFlipEntryFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'requestId', internalType: 'uint256', type: 'uint256' }],
    name: 'getRequest',
    outputs: [
      {
        name: 'request',
        internalType: 'struct CoinFlip.CoinFlipRequest',
        type: 'tuple',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'callId', internalType: 'address', type: 'address' },
          {
            name: 'guess',
            internalType: 'enum CoinFlip.CoinFlipSelection',
            type: 'uint8',
          },
          { name: 'isWinner', internalType: 'bool', type: 'bool' },
          { name: 'isSettled', internalType: 'bool', type: 'bool' },
          {
            name: 'requestTimestamp',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'settledTimestamp',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'getRequestIdsByUser',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'getRequestsByUser',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: '',
        internalType: 'struct CoinFlip.CoinFlipRequest[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'callId', internalType: 'address', type: 'address' },
          {
            name: 'guess',
            internalType: 'enum CoinFlip.CoinFlipSelection',
            type: 'uint8',
          },
          { name: 'isWinner', internalType: 'bool', type: 'bool' },
          { name: 'isSettled', internalType: 'bool', type: 'bool' },
          {
            name: 'requestTimestamp',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'settledTimestamp',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'i_entryFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'i_functionId',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 's_nextRequestId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'requestId', internalType: 'uint256', type: 'uint256' }],
    name: 's_requests',
    outputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'callId', internalType: 'address', type: 'address' },
      {
        name: 'guess',
        internalType: 'enum CoinFlip.CoinFlipSelection',
        type: 'uint8',
      },
      { name: 'isWinner', internalType: 'bool', type: 'bool' },
      { name: 'isSettled', internalType: 'bool', type: 'bool' },
      { name: 'requestTimestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'settledTimestamp', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'switchboard',
    outputs: [
      { name: '', internalType: 'contract ISwitchboard', type: 'address' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'input', internalType: 'uint256', type: 'uint256' }],
    name: 'uintToCoinFlipSelection',
    outputs: [
      {
        name: '',
        internalType: 'enum CoinFlip.CoinFlipSelection',
        type: 'uint8',
      },
    ],
  },
] as const

/**
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export const coinFlipAddress = {
  420: '0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8',
  1115: '0xC607d4f94040a8116e130A0ea349E11927c89784',
  31337: '0x0000000000000000000000000000000000000000',
  84531: '0xD2e9F43505131606beea19CCd808bFff6Cc587Ad',
  421613: '0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD',
} as const

/**
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export const coinFlipConfig = {
  address: coinFlipAddress,
  abi: coinFlipABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coinFlipABI}__.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export function useCoinFlipRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof coinFlipABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof coinFlipAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: coinFlipABI,
    address: coinFlipAddress[chainId as keyof typeof coinFlipAddress],
    ...config,
  } as UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coinFlipABI}__ and `functionName` set to `"getAllRequests"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export function useCoinFlipGetAllRequests<
  TFunctionName extends 'getAllRequests',
  TSelectData = ReadContractResult<typeof coinFlipABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof coinFlipAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: coinFlipABI,
    address: coinFlipAddress[chainId as keyof typeof coinFlipAddress],
    functionName: 'getAllRequests',
    ...config,
  } as UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coinFlipABI}__ and `functionName` set to `"getCoinFlipEntryFee"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export function useCoinFlipGetCoinFlipEntryFee<
  TFunctionName extends 'getCoinFlipEntryFee',
  TSelectData = ReadContractResult<typeof coinFlipABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof coinFlipAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: coinFlipABI,
    address: coinFlipAddress[chainId as keyof typeof coinFlipAddress],
    functionName: 'getCoinFlipEntryFee',
    ...config,
  } as UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coinFlipABI}__ and `functionName` set to `"getRequest"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export function useCoinFlipGetRequest<
  TFunctionName extends 'getRequest',
  TSelectData = ReadContractResult<typeof coinFlipABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof coinFlipAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: coinFlipABI,
    address: coinFlipAddress[chainId as keyof typeof coinFlipAddress],
    functionName: 'getRequest',
    ...config,
  } as UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coinFlipABI}__ and `functionName` set to `"getRequestIdsByUser"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export function useCoinFlipGetRequestIdsByUser<
  TFunctionName extends 'getRequestIdsByUser',
  TSelectData = ReadContractResult<typeof coinFlipABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof coinFlipAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: coinFlipABI,
    address: coinFlipAddress[chainId as keyof typeof coinFlipAddress],
    functionName: 'getRequestIdsByUser',
    ...config,
  } as UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coinFlipABI}__ and `functionName` set to `"getRequestsByUser"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export function useCoinFlipGetRequestsByUser<
  TFunctionName extends 'getRequestsByUser',
  TSelectData = ReadContractResult<typeof coinFlipABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof coinFlipAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: coinFlipABI,
    address: coinFlipAddress[chainId as keyof typeof coinFlipAddress],
    functionName: 'getRequestsByUser',
    ...config,
  } as UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coinFlipABI}__ and `functionName` set to `"i_entryFee"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export function useCoinFlipIEntryFee<
  TFunctionName extends 'i_entryFee',
  TSelectData = ReadContractResult<typeof coinFlipABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof coinFlipAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: coinFlipABI,
    address: coinFlipAddress[chainId as keyof typeof coinFlipAddress],
    functionName: 'i_entryFee',
    ...config,
  } as UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coinFlipABI}__ and `functionName` set to `"i_functionId"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export function useCoinFlipIFunctionId<
  TFunctionName extends 'i_functionId',
  TSelectData = ReadContractResult<typeof coinFlipABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof coinFlipAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: coinFlipABI,
    address: coinFlipAddress[chainId as keyof typeof coinFlipAddress],
    functionName: 'i_functionId',
    ...config,
  } as UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coinFlipABI}__ and `functionName` set to `"s_nextRequestId"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export function useCoinFlipSNextRequestId<
  TFunctionName extends 's_nextRequestId',
  TSelectData = ReadContractResult<typeof coinFlipABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof coinFlipAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: coinFlipABI,
    address: coinFlipAddress[chainId as keyof typeof coinFlipAddress],
    functionName: 's_nextRequestId',
    ...config,
  } as UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coinFlipABI}__ and `functionName` set to `"s_requests"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export function useCoinFlipSRequests<
  TFunctionName extends 's_requests',
  TSelectData = ReadContractResult<typeof coinFlipABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof coinFlipAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: coinFlipABI,
    address: coinFlipAddress[chainId as keyof typeof coinFlipAddress],
    functionName: 's_requests',
    ...config,
  } as UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coinFlipABI}__ and `functionName` set to `"switchboard"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export function useCoinFlipSwitchboard<
  TFunctionName extends 'switchboard',
  TSelectData = ReadContractResult<typeof coinFlipABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof coinFlipAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: coinFlipABI,
    address: coinFlipAddress[chainId as keyof typeof coinFlipAddress],
    functionName: 'switchboard',
    ...config,
  } as UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link coinFlipABI}__ and `functionName` set to `"uintToCoinFlipSelection"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export function useCoinFlipUintToCoinFlipSelection<
  TFunctionName extends 'uintToCoinFlipSelection',
  TSelectData = ReadContractResult<typeof coinFlipABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof coinFlipAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: coinFlipABI,
    address: coinFlipAddress[chainId as keyof typeof coinFlipAddress],
    functionName: 'uintToCoinFlipSelection',
    ...config,
  } as UseContractReadConfig<typeof coinFlipABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coinFlipABI}__.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export function useCoinFlipWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof coinFlipAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof coinFlipABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof coinFlipABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof coinFlipABI, TFunctionName, TMode>({
    abi: coinFlipABI,
    address: coinFlipAddress[chainId as keyof typeof coinFlipAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coinFlipABI}__ and `functionName` set to `"coinFlipRequest"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export function useCoinFlipCoinFlipRequest<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof coinFlipAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof coinFlipABI,
          'coinFlipRequest'
        >['request']['abi'],
        'coinFlipRequest',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'coinFlipRequest'
      }
    : UseContractWriteConfig<typeof coinFlipABI, 'coinFlipRequest', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'coinFlipRequest'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof coinFlipABI, 'coinFlipRequest', TMode>({
    abi: coinFlipABI,
    address: coinFlipAddress[chainId as keyof typeof coinFlipAddress],
    functionName: 'coinFlipRequest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link coinFlipABI}__ and `functionName` set to `"coinFlipSettle"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export function useCoinFlipCoinFlipSettle<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof coinFlipAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof coinFlipABI,
          'coinFlipSettle'
        >['request']['abi'],
        'coinFlipSettle',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'coinFlipSettle'
      }
    : UseContractWriteConfig<typeof coinFlipABI, 'coinFlipSettle', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'coinFlipSettle'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof coinFlipABI, 'coinFlipSettle', TMode>({
    abi: coinFlipABI,
    address: coinFlipAddress[chainId as keyof typeof coinFlipAddress],
    functionName: 'coinFlipSettle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coinFlipABI}__.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export function usePrepareCoinFlipWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof coinFlipABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof coinFlipAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: coinFlipABI,
    address: coinFlipAddress[chainId as keyof typeof coinFlipAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof coinFlipABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coinFlipABI}__ and `functionName` set to `"coinFlipRequest"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export function usePrepareCoinFlipCoinFlipRequest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof coinFlipABI, 'coinFlipRequest'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof coinFlipAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: coinFlipABI,
    address: coinFlipAddress[chainId as keyof typeof coinFlipAddress],
    functionName: 'coinFlipRequest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof coinFlipABI, 'coinFlipRequest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link coinFlipABI}__ and `functionName` set to `"coinFlipSettle"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export function usePrepareCoinFlipCoinFlipSettle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof coinFlipABI, 'coinFlipSettle'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof coinFlipAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: coinFlipABI,
    address: coinFlipAddress[chainId as keyof typeof coinFlipAddress],
    functionName: 'coinFlipSettle',
    ...config,
  } as UsePrepareContractWriteConfig<typeof coinFlipABI, 'coinFlipSettle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link coinFlipABI}__.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export function useCoinFlipEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof coinFlipABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof coinFlipAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: coinFlipABI,
    address: coinFlipAddress[chainId as keyof typeof coinFlipAddress],
    ...config,
  } as UseContractEventConfig<typeof coinFlipABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link coinFlipABI}__ and `eventName` set to `"CoinFlipRequested"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export function useCoinFlipCoinFlipRequestedEvent(
  config: Omit<
    UseContractEventConfig<typeof coinFlipABI, 'CoinFlipRequested'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof coinFlipAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: coinFlipABI,
    address: coinFlipAddress[chainId as keyof typeof coinFlipAddress],
    eventName: 'CoinFlipRequested',
    ...config,
  } as UseContractEventConfig<typeof coinFlipABI, 'CoinFlipRequested'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link coinFlipABI}__ and `eventName` set to `"CoinFlipSettled"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x6c10f69CD6d40D8c8413bd3b598bdb00f3e1F2b8)
 * -
 * - [__View Contract on Base Goerli Basescan__](https://goerli.basescan.org/address/0xD2e9F43505131606beea19CCd808bFff6Cc587Ad)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x9B377Beee7f8b8A2Cfc6ed0Fc5cab14701109fAD)
 */
export function useCoinFlipCoinFlipSettledEvent(
  config: Omit<
    UseContractEventConfig<typeof coinFlipABI, 'CoinFlipSettled'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof coinFlipAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: coinFlipABI,
    address: coinFlipAddress[chainId as keyof typeof coinFlipAddress],
    eventName: 'CoinFlipSettled',
    ...config,
  } as UseContractEventConfig<typeof coinFlipABI, 'CoinFlipSettled'>)
}
